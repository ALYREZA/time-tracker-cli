{"version":3,"sources":["../../src/core/output.js"],"names":["sumarize","search","tasks","rate","full","format","table","head","chars","colAligns","style","total","forEach","task","index","name","duration","getSeconds","push","getStartDate","console","log","toString","table2","outputConfig","config","Object","keys","map","e","outputVertical","args","key","splice","cliError","err","error","red","cliSuccess","green"],"mappings":"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","file":"output.js","sourcesContent":["import moment from 'moment'\nimport Table from 'cli-table'\nimport chalk from 'chalk'\n\nimport { humanParseDiff, calcRate } from './utils'\n\nexport const sumarize = function(search, tasks, rate, full, format) {\n    let table = new Table({\n        head: ['Duration', 'Dates', 'Task'],\n        chars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''},\n        colAligns: ['right', 'center', 'left'],\n        style: { head: ['green'] }\n    });\n    let total = 0\n    let head= `Search: ${search} \\n`\n\n    tasks.forEach((task, index) => {\n        let name = task.name\n        task = task.task\n\n        let duration = task.getSeconds()\n        total += duration\n\n        table.push([humanParseDiff(duration), moment(task.getStartDate()).format(format), name])\n    })\n\n    console.log(table.toString());\n\n    if (full){\n        let table2 = new Table()\n        table2.push(\n            { 'Search': ['\\\"' + search + '\\\"'] },\n            { 'Total time': [humanParseDiff(total)] }\n        )\n\n        if (rate){\n            table2.push({ 'Rate': [calcRate(rate, total)] })\n        }\n\n        console.log(table2.toString());\n    }\n}\n\nexport const outputConfig = function (config){\n    let table = new Table({\n        head: ['Key', 'value'],\n        chars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''},\n        colAligns: ['center', 'center'],\n        style: { head: ['green'] }\n    });\n\n    Object.keys(config).map(e => table.push([e, config[e]]))\n\n    console.log(table.toString());\n}\n\nexport const outputVertical = function (...args){\n    let table2 = new Table()\n        let key = args.splice(0, 1)\n        table2.push(\n            { [key]: args },\n        )\n\n        return table2.toString()\n}\n\nexport const cliError = function(err) {\n    console.error(chalk.red(`Error: ${err}`))\n}\n\nexport const cliSuccess = function(err) {\n    console.log(chalk.green(err))\n}\n"]}