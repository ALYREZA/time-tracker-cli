{"version":3,"sources":["../src/Timer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;IAEqB;AACjB,aADiB,KACjB,CAAY,KAAZ,EAAkB;8BADD,OACC;;AACd,aAAK,KAAL,GAAa,KAAb,CADc;KAAlB;;iBADiB;;mCAIP;AACN,mBAAO,KAAK,KAAL,CADD;;;;gCAGF,MAAK;AACT,mBAAO,IAAC,CAAK,KAAL,CAAW,IAAX,CAAD,GAAqB,KAAK,KAAL,CAAW,IAAX,CAArB,GAAwC,EAAxC,CADE;;;;gCAGL,MAAM,KAAI;AACd,gBAAI,SAAS,EAAT,CADU;AAEd,mBAAO,IAAP,IAAe,GAAf,CAFc;AAGd,iBAAK,KAAL,GAAa,OAAO,MAAP,CAAc,EAAd,EAAkB,KAAK,KAAL,EAAY,MAA9B,CAAb,CAHc;;;;8BAKZ,MAAK;AACP,gBAAI,IAAI,KAAK,OAAL,CAAa,IAAb,CAAJ,CADG;AAEP,gBAAI,CAAC,EAAE,KAAF,EAAQ;AACT,qBAAK,OAAL,CAAa,IAAb,EAAmB,EAAC,OAAO,uBAAP,EAApB,EADS;aAAb;;;;6BAIC,MAAK;AACN,gBAAI,IAAI,KAAK,OAAL,CAAa,IAAb,CAAJ,CADE;AAEN,gBAAI,CAAC,EAAE,IAAF,IAAU,EAAE,KAAF,EAAQ;AACnB,qBAAK,OAAL,CAAa,IAAb,EAAmB,EAAC,OAAO,EAAE,KAAF,EAAS,MAAM,uBAAN,EAApC,EADmB;aAAvB;;;;gCAII,MAAK;AACT,gBAAI,IAAI,KAAK,OAAL,CAAa,IAAb,CAAJ,CADK;AAET,gBAAI,EAAE,KAAF,EAAS;AACT,uBAAO,wBAAS,IAAT,CAAc,EAAE,KAAF,EAAS,SAAvB,CAAP,CADS;aAAb;;;;uCAIW,MAAK;AAChB,gBAAI,QAAU,KAAK,KAAL,CAAW,OAAO,IAAP,CAArB,CADY;AAEhB,gBAAI,UAAU,KAAK,KAAL,CAAW,CAAC,OAAQ,QAAQ,IAAR,CAAT,GAA0B,EAA1B,CAArB,CAFY;AAGhB,gBAAI,UAAU,OAAQ,QAAQ,IAAR,GAAiB,UAAU,EAAV,CAHvB;;AAKhB,mBAAO,CAAC,QAAQ,EAAR,GAAa,MAAM,KAAN,GAAc,KAA3B,CAAD,GAAqC,IAArC,IAA6C,UAAU,EAAV,GAAe,MAAM,OAAN,GAAgB,OAA/B,CAA7C,GAAuF,IAAvF,IAA+F,UAAW,EAAX,GAAgB,MAAM,OAAN,GAAgB,OAAhC,CAA/F,GAA0I,GAA1I,CALS;;;;WAjCH","file":"Timer.js","sourcesContent":["import moment from 'moment'\n\nexport default class Timer {\n    constructor(tasks){\n        this.tasks = tasks\n    }\n    getTasks(){\n        return this.tasks\n    }\n    getTask(name){\n        return (this.tasks[name]) ? this.tasks[name] : {}\n    }\n    setTask(name, obj){\n        let update = {}\n        update[name] = obj\n        this.tasks = Object.assign({}, this.tasks, update)\n    }\n    start(name){\n        let t = this.getTask(name)\n        if (!t.start){\n            this.setTask(name, {start: moment()})\n        }\n    }\n    stop(name){\n        let t = this.getTask(name)\n        if (!t.stop && t.start){\n            this.setTask(name, {start: t.start, stop: moment()})\n        }\n    }\n    getTime(name){\n        let t = this.getTask(name)\n        if (t.start) {\n            return moment().diff(t.start, 'seconds');\n        }\n    }\n    humanParseDiff(secs){\n        let hours   = Math.floor(secs / 3600);\n        let minutes = Math.floor((secs - (hours * 3600)) / 60);\n        let seconds = secs - (hours * 3600) - (minutes * 60);\n\n        return (hours < 10 ? \"0\" + hours : hours) + \"h \" + (minutes < 10 ? \"0\" + minutes : minutes) + \"m \" + (seconds  < 10 ? \"0\" + seconds : seconds) + \"s\";\n    }\n}\n"]}