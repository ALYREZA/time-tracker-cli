{"version":3,"sources":["../src/Manager.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMa;AACT,aADS,OACT,CAAY,GAAZ,EAAiB;8BADR,SACQ;;AACb,aAAK,KAAL,GAAa,IAAI,GAAJ,CAAQ,KAAR,CADA;KAAjB;;iBADS;;gCAKD,MAAM;AACV,mBAAO,IAAC,CAAK,KAAL,CAAW,IAAX,CAAD,GAAqB,KAAK,KAAL,CAAW,IAAX,CAArB,GAAwC,EAAxC,CADG;;;;qCAID;AACT,mBAAO,GAAP,CAAW,OAAX,EAAoB,KAAK,KAAL,CAApB,CADS;;;;gCAIL,MAAM,KAAK;AACf,gBAAI,SAAS,EAAT,CADW;AAEf,mBAAO,IAAP,IAAe,GAAf,CAFe;AAGf,iBAAK,KAAL,GAAa,OAAO,MAAP,CAAc,EAAd,EAAkB,KAAK,KAAL,EAAY,MAA9B,CAAb,CAHe;AAIf,iBAAK,UAAL,GAJe;;;;8BAOb,MAAM,aAAa;AACrB,gBAAI,IAAI,KAAK,OAAL,CAAa,IAAb,CAAJ,CADiB;AAErB,gBAAI,CAAC,EAAE,KAAF,EAAS;AACV,kBAAE,KAAF,GAAU,wBAAS,MAAT,EAAV,CADU;AAEV,oBAAI,WAAJ,EAAiB,EAAE,WAAF,GAAgB,WAAhB,CAAjB;AACA,qBAAK,OAAL,CAAa,IAAb,EAAmB,CAAnB,EAHU;aAAd;;;;6BAOC,MAAM,aAAa;AACpB,gBAAI,IAAI,KAAK,OAAL,CAAa,IAAb,CAAJ,CADgB;AAEpB,gBAAI,CAAC,EAAE,IAAF,EAAQ;AACT,kBAAE,IAAF,GAAS,wBAAS,MAAT,EAAT,CADS;AAET,oBAAI,WAAJ,EAAiB,EAAE,WAAF,GAAgB,WAAhB,CAAjB;AACA,qBAAK,OAAL,CAAa,IAAb,EAAmB,CAAnB,EAHS;aAAb;;;;gCAOI,MAAM;AACV,gBAAI,IAAI,KAAK,OAAL,CAAa,IAAb,CAAJ,CADM;AAEV,gBAAI,EAAE,IAAF,EAAQ;AACR,uBAAO,sBAAO,EAAE,IAAF,CAAP,CAAe,IAAf,CAAoB,sBAAO,EAAE,KAAF,CAA3B,EAAqC,SAArC,CAAP,CADQ;aAAZ,MAEO;AACH,uBAAO,wBAAS,IAAT,CAAc,sBAAO,EAAE,KAAF,CAArB,EAA+B,SAA/B,CAAP,CADG;aAFP;;;;+BAOG,QAAQ;;;AACX,gBAAI,OAAO,OAAO,IAAP,CAAY,KAAK,KAAL,CAAnB,CADO;AAEX,gBAAI,QAAQ,EAAR,CAFO;AAGX,iBAAK,GAAL,CAAS,UAAC,GAAD,EAAO;AACZ,oBAAI,WAAW,KAAX,IAAoB,IAAI,OAAJ,CAAY,MAAZ,IAAsB,CAAC,CAAD,EAAG;AAC7C,0BAAM,IAAN,CAAW;AACP,8BAAM,GAAN;AACA,8BAAM,MAAK,KAAL,CAAW,GAAX,CAAN;qBAFJ,EAD6C;iBAAjD;aADK,CAAT,CAHW;AAWX,mBAAO,KAAP,CAXW;;;;uCAaA;AACX,mBAAO,eAAK,SAAL,CAAe,KAAK,KAAL,CAAtB,CADW;;;;WA5DN;;;AAiEb,IAAM,SAAS,0BAAgB,kBAAI,IAAJ,EAAU,EAAC,OAAM,EAAN,EAA3B,CAAT;;kBAES,IAAI,OAAJ,CAAY,MAAZ","file":"Manager.js","sourcesContent":["import flat from 'flat'\n\nimport moment from 'moment'\nimport Configstore from 'configstore'\nimport pkg from '../package.json'\n\nexport class Manager {\n    constructor(cfg) {\n        this.tasks = cfg.all.tasks\n    }\n\n    getTask(name) {\n        return (this.tasks[name]) ? this.tasks[name] : {}\n    }\n\n    storeTasks() {\n        config.set('tasks', this.tasks)\n    }\n\n    setTask(name, obj) {\n        let update = {}\n        update[name] = obj\n        this.tasks = Object.assign({}, this.tasks, update)\n        this.storeTasks()\n    }\n\n    start(name, description) {\n        let t = this.getTask(name)\n        if (!t.start) {\n            t.start = moment().toDate()\n            if (description) t.description = description\n            this.setTask(name, t)\n        }\n    }\n\n    stop(name, description) {\n        let t = this.getTask(name)\n        if (!t.stop) {\n            t.stop = moment().toDate()\n            if (description) t.description = description\n            this.setTask(name, t)\n        }\n    }\n\n    getTime(name) {\n        let t = this.getTask(name)\n        if (t.stop) {\n            return moment(t.stop).diff(moment(t.start), 'seconds')\n        } else {\n            return moment().diff(moment(t.start), 'seconds')\n        }\n    }\n\n    search(string) {\n        let keys = Object.keys(this.tasks)\n        let tasks = []\n        keys.map((key)=>{\n            if (string === 'all' || key.indexOf(string) > -1){\n                tasks.push({\n                    name: key,\n                    task: this.tasks[key]\n                })\n            }\n        })\n        return tasks\n    }\n    getTasksJson() {\n        return flat.unflatten(this.tasks)\n    }\n}\n\nconst config = new Configstore(pkg.name, {tasks:{}})\n\nexport default new Manager(config)\n"]}