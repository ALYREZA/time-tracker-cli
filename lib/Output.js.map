{"version":3,"sources":["../src/Output.js"],"names":[],"mappings":";;;;;;;;;;;;;AAEO,IAAM,0CAAiB,SAAjB,cAAiB,CAAS,IAAT,EAAe;AACzC,QAAI,QAAU,KAAK,KAAL,CAAW,OAAO,IAAP,CAArB,CADqC;AAEzC,QAAI,UAAU,KAAK,KAAL,CAAW,CAAC,OAAQ,QAAQ,IAAR,CAAT,GAA0B,EAA1B,CAArB,CAFqC;AAGzC,QAAI,UAAU,OAAQ,QAAQ,IAAR,GAAiB,UAAU,EAAV,CAHE;AAIzC,YAAS,SAAS,CAAT,GAAa,EAAb,GAAkB,CAAC,QAAQ,EAAR,GAAa,MAAM,KAAN,GAAc,KAA3B,CAAD,GAAqC,IAArC,CAJc;AAKzC,cAAW,WAAW,CAAX,GAAe,EAAf,GAAoB,CAAC,UAAU,EAAV,GAAe,MAAM,OAAN,GAAgB,OAA/B,CAAD,GAA2C,IAA3C,CALU;AAMzC,cAAU,CAAC,UAAW,EAAX,GAAgB,MAAM,OAAN,GAAgB,OAAhC,CAAD,GAA4C,GAA5C,CAN+B;AAOzC,WAAO,QAAQ,OAAR,GAAkB,OAAlB,CAPkC;CAAf;;AAUvB,IAAM,8CAAmB,SAAnB,gBAAmB,CAAS,IAAT,EAAe;AAC3C,QAAI,iBAAiB,eAAe,IAAf,CAAjB,CADuC;AAE3C,QAAI,eAAe,MAAf,KAA0B,CAA1B,EAA6B;AAC7B,yBAAiB,WAAW,GAAX,EAAgB,CAAhB,IAAqB,cAArB,CADY;KAAjC,MAEO,IAAI,eAAe,MAAf,KAA0B,CAA1B,EAA6B;AACpC,yBAAiB,WAAW,GAAX,EAAgB,CAAhB,IAAqB,cAArB,CADmB;KAAjC;AAGP,WAAO,cAAP,CAP2C;CAAf;;AAUzB,IAAM,kCAAa,SAAb,UAAa,CAAU,IAAV,EAAgB,KAAhB,EAAuB;AAC7C,QAAI,SAAS,EAAT,CADyC;AAE7C,SAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAJ,EAAW,GAA3B,EAAgC;AAC5B,kBAAU,IAAV,CAD4B;KAAhC;AAGA,WAAO,MAAP,CAL6C;CAAvB;;AAQnB,IAAM,8BAAW,SAAX,QAAW,CAAS,MAAT,EAAiB,KAAjB,EAAwB;AAC5C,QAAI,SAAS,EAAT,CADwC;AAE5C,QAAI,QAAQ,CAAR,CAFwC;AAG5C,2BAAqB,cAArB,CAH4C;AAI5C,uBAJ4C;AAK5C,UAAM,GAAN,CAAU,UAAC,IAAD,EAAO,KAAP,EAAe;AACrB,YAAI,WAAW,sBAAO,KAAK,IAAL,CAAU,IAAV,CAAP,CAAuB,IAAvB,CAA4B,sBAAO,KAAK,IAAL,CAAU,KAAV,CAAnC,EAAqD,SAArD,CAAX,CADiB;AAErB,iBAAS,QAAT,CAFqB;;AAIrB,YAAI,iBAAiB,iBAAiB,QAAjB,CAAjB,CAJiB;;AAMrB,YAAI,OAAO,KAAK,IAAL,CANU;AAOrB,YAAI,YAAY,sBAAO,KAAK,IAAL,CAAU,KAAV,CAAP,CAAwB,MAAxB,CAA+B,qBAA/B,CAAZ,CAPiB;;AASrB,YAAI,OAAU,wBAAmB,mBAAc,IAA3C,CATiB;AAUrB,kBAAU,YAAY,IAAZ,GAAmB,IAAnB,CAVW;KAAf,CAAV,CAL4C;AAiB5C,uBAjB4C;AAkB5C,0BAAoB,iBAAiB,KAAjB,qBAApB,CAlB4C;AAmB5C,YAAQ,MAAR,CAAe,KAAf,CAAqB,MAArB,EAnB4C;CAAxB","file":"Output.js","sourcesContent":["import moment from 'moment'\n\nexport const humanParseDiff = function(secs) {\n    let hours   = Math.floor(secs / 3600)\n    let minutes = Math.floor((secs - (hours * 3600)) / 60)\n    let seconds = secs - (hours * 3600) - (minutes * 60)\n    hours = (hours == 0 ? '' : (hours < 10 ? '0' + hours : hours) + 'h ')\n    minutes = (minutes == 0 ? '' : (minutes < 10 ? '0' + minutes : minutes) + 'm ')\n    seconds = (seconds  < 10 ? '0' + seconds : seconds) + 's'\n    return hours + minutes + seconds\n}\n\nexport const outputHumanParse = function(secs) {\n    let outputDuration = humanParseDiff(secs)\n    if (outputDuration.length === 3) {\n        outputDuration = repeatChar(' ', 8) + outputDuration\n    } else if (outputDuration.length === 7) {\n        outputDuration = repeatChar(' ', 4) + outputDuration\n    }\n    return outputDuration\n}\n\nexport const repeatChar = function (char, times) {\n    let output = ''\n    for (var i = 0; i < times; i++) {\n        output += char\n    }\n    return output\n}\n\nexport const sumarize = function(search, tasks) {\n    let output = ''\n    let total = 0\n    output += `Search: ${search} \\n`\n    output += ` ─┐ \\n`\n    tasks.map((task, index)=>{\n        let duration = moment(task.task.stop).diff(moment(task.task.start), 'seconds')\n        total += duration\n\n        let outputDuration = outputHumanParse(duration)\n\n        let name = task.name\n        let startTime = moment(task.task.start).format('HH:mm:ss DD/MM/YYYY')\n\n        let time = `${outputDuration} (${startTime}) ${name}`\n        output += '  ├──> ' + time + '\\n'\n    })\n    output += `  │ \\n`\n    output += `  └──> ${outputHumanParse(total)} (Total time)\\n`\n    process.stdout.write(output)\n}\n"]}